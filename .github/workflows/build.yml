name: Build

on: [push, pull_request]

jobs:
  test-linux:
    name: "Run tests on Linux"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python: ["3.11", "3.10", "3.9", "3.8", "3.7"]

    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}
      
      - name: Run Tests (Linux)
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install pytest-cov numpy Cython
          python setup.py build_ext -i
          python -m pip install .
          pytest --cov-report html --cov-report xml --cov-report annotate --cov=pixell pixell/tests/ -s
          
      - uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          verbose: true # optional (default = false)

  test-macos:
    name: "Run tests on MacOS"
    runs-on: macos-latest
    env:
      # LDFLAGS: "-ld64" # For MacOS 13 and above (XCode CLT 15 and above.)
      CC: gcc-12
      CXX: gcc-12
      FC: gfortran-12
      DUCC0_NUM_THREADS: 2

    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-python@v1
        with:
          python-version: "3.9"

      - name: Install Dependencies (MacOS)
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install numpy Cython
          

      - name: Install Package (MacOS)
        # The built-in fortran compiler does not link to gfortran (just numbered versions)
        # and build_ext does not play nicely with that. So we link gfortran-X to gfortran.
        run: |
          ln -s $FC $(dirname $(which $FC))/gfortran
          echo "Using FC=$FC CXX=$CXX CC=$CC"
          python setup.py build_ext -i 
          python -m pip install .

      - name: Run Tests (MacOS)
        run: |
          pytest pixell/tests/ -s


  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-latest]
        cp: [cp37, cp38, cp39, cp310, cp311]
        include:
          - cp: cp37
            numpyver: "1.20"
          - cp: cp38
            numpyver: "1.20"
          - cp: cp39
            numpyver: "1.20"
          - cp: cp310
            numpyver: "1.22"
          - cp: cp311
            numpyver: "1.22"

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'

      - name: Install cibuildwheel and other dependencies
        run: |
          python -m pip install -U pip
          python -m easy_install -U setuptools
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install pytest-cov numpy
          python -m pip install cibuildwheel

      - name: Test and build wheels
        run: bash scripts/build_wheels.sh
        env:
          CIBW_ENVIRONMENT: OMP_NUM_THREADS=2
                            OPENBLAS_NUM_THREADS=2
          CIBW_BEFORE_BUILD: "python -m pip install numpy==${{ matrix.numpyver }} scipy cython"
          CIBW_BUILD_VERBOSITY: 3
          CIBW_BUILD: "${{ matrix.cp }}-*x86_64"
          CIBW_SKIP: "*-musllinux_*"
          CIBW_ARCHS_MACOS: "x86_64 arm64 universal2"
          PYTHON: "python"
          PIP: "pip"

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl
      

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'

      - name: Build sdist
        run: |
          python -m pip install -U pip
          python -m easy_install -U setuptools
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install numpy
          python setup.py sdist

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          # To test: repository_url: https://test.pypi.org/legacy/
