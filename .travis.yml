Language: python

jobs:
  include:

    - language: python
      dist: xenial
      sudo: required
      python: "3.7"
      services:
        - docker
      script: python3 setup.py sdist --formats=gztar
      after_success: |
        echo $TRAVIS_TAG
        if [[ $TRAVIS_TAG ]]; then
          python3 -m pip install twine
          python3 -m twine upload --skip-existing dist/*.tar.gz
        fi
        
    - os: osx
      language: shell

env:
  global:
    - TWINE_USERNAME=__token__
    # Note: TWINE_PASSWORD is set to an API token in Travis settings
    - CIBW_BEFORE_BUILD="python3 -m pip install numpy scipy cython"
    - CIBW_BUILD_VERBOSITY: 3
    - CIBW_BUILD="cp3?-*x86_64"
    - CIBW_SKIP="cp33-* cp34-* cp35-*"
    - PYTHON=python3
    - PIP=pip
        
install:
  - python3 -m pip install -U pip
  - python3 -m easy_install -U setuptools
  - python3 -m pip install pytest-cov
  - python3 -m pip install cibuildwheel==1.4.2

script:
  - python3 setup.py build_ext -i
  - pip install .
  - py.test --cov=pixell pixell/tests/ -s
  - find . -type f -iname '*.so' -print -delete
  - rm -rf _deps/
  # build the wheels, put them into './wheelhouse'
  - python3 -m cibuildwheel --output-dir wheelhouse
  - ls wheelhouse

after_success:
  # if the release was tagged, upload them to PyPI
  - |
    echo $TRAVIS_TAG
    if [[ $TRAVIS_TAG ]]; then
      python3 -m pip install twine
      python3 -m twine upload --verbose --skip-existing wheelhouse/*.whl
    fi
    

before_install:
  - |
    if [ "$TRAVIS_OS_NAME" == "osx" ]; then
    brew update
    # Per the `pyenv homebrew recommendations <https://github.com/yyuu/pyenv/wiki#suggested-build-environment>`_.
    brew install openssl readline
    # See https://docs.travis-ci.com/user/osx-ci-environment/#A-note-on-upgrading-packages.
    # I didn't do this above because it works and I'm lazy.
    brew outdated pyenv || brew upgrade pyenv
    # virtualenv doesn't work without pyenv knowledge. venv in Python 3.3
    # doesn't provide Pip by default. So, use `pyenv-virtualenv <https://github.com/yyuu/pyenv-virtualenv/blob/master/README.md>`_.
    brew install pyenv-virtualenv
    pyenv install $PYTHON
    # I would expect something like ``pyenv init; pyenv local $PYTHON`` or
    # ``pyenv shell $PYTHON`` would work, but ``pyenv init`` doesn't seem to
    # modify the Bash environment. ??? So, I hand-set the variables instead.
    export PYENV_VERSION=$PYTHON
    export PATH="/Users/travis/.pyenv/shims:${PATH}"
    pyenv-virtualenv venv
    source venv/bin/activate
    # A manual check that the correct version of Python is running.
    python --version
    fi
    
addons:
  apt_packages:
  - gfortran
